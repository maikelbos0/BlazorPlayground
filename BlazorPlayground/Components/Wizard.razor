<CascadingValue Value="this">
    @if (IsActive) {
        var renderedComponents = new HashSet<WizardComponent>();

        <div class="@ContainerClass">

            @foreach (var component in LayoutOrder.Concat(new List<WizardComponent>() { WizardComponent.Title, WizardComponent.Menu, WizardComponent.Buttons, WizardComponent.Content })) {
                switch (component) {
                    case WizardComponent.Title:
                        if (renderedComponents.Contains(WizardComponent.Title)) {
                            continue;
                        }

                        renderedComponents.Add(WizardComponent.Title);

                        <div class="@TitleClass">
                            @TitleContent
                        </div>
                        break;
                    case WizardComponent.Menu:
                        if (renderedComponents.Contains(WizardComponent.Menu)) {
                            continue;
                        }

                        renderedComponents.Add(WizardComponent.Menu);

                        <div class="@MenuClass">
                            @for (var index = 0; index < StepsInternal.Count; index++) {
                                if (index == ActiveStepIndex) {
                                    <div class="@MenuItemClass @ActiveMenuItemClass">@StepsInternal[index].Title</div>
                                }
                                else {
                                    <div class="@MenuItemClass">@StepsInternal[index].Title</div>
                                }
                            }
                        </div>
                        break;

                    case WizardComponent.Buttons:
                        if (renderedComponents.Contains(WizardComponent.Buttons)) {
                            continue;
                        }

                        renderedComponents.Add(WizardComponent.Buttons);

                        <div class="@ButtonBarClass">
                            <button @onclick="TryCompleteStep" class="@ButtonClass">@(ActiveStepIndex < StepsInternal.Count - 1 ? ButtonNextText : ButtonFinishText) </button>
                        </div>
                        break;
                    case WizardComponent.Content:
                        if (renderedComponents.Contains(WizardComponent.Content)) {
                            continue;
                        }

                        renderedComponents.Add(WizardComponent.Content);

                        <div class="@ContentClass">
                            @Steps
                        </div>
                        break;
                }
            }
        </div>
    }
</CascadingValue>

@code {

    [Parameter]
    public string ContainerClass { get; set; }

    [Parameter]
    public string TitleClass { get; set; }

    [Parameter]
    public RenderFragment TitleContent { get; set; }

    [Parameter]
    public string MenuClass { get; set; }

    [Parameter]
    public string MenuItemClass { get; set; }

    [Parameter]
    public string ActiveMenuItemClass { get; set; }

    [Parameter]
    public string ButtonBarClass { get; set; }

    [Parameter]
    public string ButtonClass { get; set; }

    [Parameter]
    public string ButtonNextText { get; set; } = "Next";

    [Parameter]
    public string ButtonFinishText { get; set; } = "Finish";

    [Parameter]
    public string ContentClass { get; set; }

    [Parameter]
    public RenderFragment Steps { get; set; }

    [Parameter]
    public IList<WizardComponent> LayoutOrder { get; set; } = new List<WizardComponent>();

    private List<WizardStep> StepsInternal { get; set; } = new List<WizardStep>();
    private int? ActiveStepIndex { get; set; }
    internal WizardStep ActiveStep => ActiveStepIndex.HasValue && StepsInternal.Count > ActiveStepIndex.Value ? StepsInternal[ActiveStepIndex.Value] : null;

    public bool IsActive => ActiveStepIndex.HasValue;

    public void Start() {
        if (IsActive) {
            return;
        }

        ActiveStepIndex = 0;
        StateHasChanged();
    }

    // TODO cancel?

    internal async Task AddStep(WizardStep step) {
        if (!StepsInternal.Contains(step)) {
            StepsInternal.Add(step);

            if (StepsInternal.Count == 1) {
                // TODO move to step
                await ActiveStep.OnInitializeStep.InvokeAsync(new InitializeStepEventArgs());
            }
        }
    }

    private async Task TryCompleteStep() {
        var args = new TryCompleteStepEventArgs();

        // TODO move to step
        await ActiveStep.OnTryCompleteStep.InvokeAsync(args);

        if (!args.IsCancelled) {

            ActiveStepIndex++;

            if (ActiveStep == null) {
                ActiveStepIndex = null;
                StepsInternal.Clear();
            }
            else {
                // TODO move to step
                await ActiveStep.OnInitializeStep.InvokeAsync(new InitializeStepEventArgs());
            }
        }
    }
}
