
@TitleContent

<div>
    @for (var index = 0; index < Steps.Count; index++) {
        if (index == ActiveStepIndex) {
            <span class="text-primary">@Steps[index].Title</span>
        }
        else {
            @Steps[index].Title
        }
    }
</div>

<div>
    <CascadingValue Value="this">
        @WizardSteps
    </CascadingValue>
</div>

<div>
    @if (ActiveStepIndex < Steps.Count - 1) {
        <button @onclick="TryCompleteStep">Next</button>
    }
    else if (ActiveStepIndex == Steps.Count - 1) {
        <button @onclick="TryCompleteStep">Finish</button>
    }
</div>

@code {

    [Parameter]
    public RenderFragment TitleContent { get; set; }

    [Parameter]
    public RenderFragment WizardSteps { get; set; }

    private List<WizardStep> Steps { get; set; } = new List<WizardStep>();

    private int ActiveStepIndex { get; set; } = 0;
    internal WizardStep ActiveStep => (ActiveStepIndex < Steps.Count) ? Steps[ActiveStepIndex] : null;

    internal async Task AddStep(WizardStep step) {
        Steps.Add(step);

        if (Steps.Count == 1) {
            await ActiveStep.OnInitializeStep.InvokeAsync(new InitializeStepEventArgs());
        }

        StateHasChanged();
    }

    private async Task TryCompleteStep() {
        var args = new TryCompleteStepEventArgs();

        await ActiveStep.OnTryCompleteStep.InvokeAsync(args);

        if (!args.IsCancelled) {

            ActiveStepIndex++;

            if (ActiveStep != null) {
                await ActiveStep.OnInitializeStep.InvokeAsync(new InitializeStepEventArgs());
            }
        }
    }
}
