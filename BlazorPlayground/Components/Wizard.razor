<CascadingValue Value="this">
    @if (IsActive) {
        <div class="@ContainerClass">
            <div class="@TitleClass">
                @TitleContent
            </div>

            <div class="@MenuClass">
                @for (var index = 0; index < Steps.Count; index++) {
                    if (index == ActiveStepIndex) {
                        <div class="@MenuItemClass @ActiveMenuItemClass">@Steps[index].Title</div>
                    }
                    else {
                        <div class="@MenuItemClass">@Steps[index].Title</div>
                    }
                }
            </div>

            <div class="@ContentClass">
                @Steps
            </div>

            @if (IsActive) {
                <div class="@ButtonBarClass">
                    <button @onclick="TryCompleteStep" class="@ButtonClass">@(ActiveStepIndex < Steps.Count - 1 ? ButtonNextText : ButtonFinishText) </button>
                </div>
            }
        </div>
    }
</CascadingValue>

@code {

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public string ContainerClass { get; set; }

    [Parameter]
    public string TitleClass { get; set; }

    [Parameter]
    public RenderFragment TitleContent { get; set; }

    [Parameter]
    public string MenuClass { get; set; }

    [Parameter]
    public string MenuItemClass { get; set; }

    [Parameter]
    public string ActiveMenuItemClass { get; set; }

    [Parameter]
    public string ButtonBarClass { get; set; }

    [Parameter]
    public string ButtonClass { get; set; }

    [Parameter]
    public string ButtonNextText { get; set; } = "Next";

    [Parameter]
    public string ButtonFinishText { get; set; } = "Finish";

    [Parameter]
    public string ContentClass { get; set; }

    [Parameter]
    public RenderFragment WizardSteps { get; set; }

    private List<WizardStep> Steps { get; set; } = new List<WizardStep>();
    private int? ActiveStepIndex { get; set; }
    internal WizardStep ActiveStep => ActiveStepIndex.HasValue && Steps.Count > ActiveStepIndex.Value ? Steps[ActiveStepIndex.Value] : null;

    public bool IsActive => ActiveStepIndex.HasValue;

    public void Start() {
        if (IsActive) {
            return;
        }

        ActiveStepIndex = 0;
        StateHasChanged();
    }

    // TODO cancel?

    internal void AddStep(WizardStep step) {
        if (!Steps.Contains(step)) {
            Steps.Add(step);
        }
    }

    private async Task TryCompleteStep() {
        var args = new TryCompleteStepEventArgs();

        await ActiveStep.OnTryCompleteStep.InvokeAsync(args);

        if (!args.IsCancelled) {

            ActiveStepIndex++;

            if (ActiveStep == null) {
                ActiveStepIndex = null;
                Steps.Clear();
            }
        }
    }
}
