<CascadingValue Value="this">
    @if (IsActive) {
        @TitleContent

        <div>
            @for (var index = 0; index < Steps.Count; index++) {
                if (index == ActiveStepIndex) {
                    <span class="text-primary">@Steps[index].Title</span>
                }
                else {
                    @Steps[index].Title
                }
            }
        </div>
    }

    <div>
        @WizardSteps
    </div>

    @if (IsActive) {
        <div>
            @if (ActiveStepIndex < Steps.Count - 1) {
                <button @onclick="TryCompleteStep">Next</button>
            }
            else if (ActiveStepIndex == Steps.Count - 1) {
                <button @onclick="TryCompleteStep">Finish</button>
            }
        </div>
    }
</CascadingValue>

@code {

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public RenderFragment TitleContent { get; set; }

    [Parameter]
    public RenderFragment WizardSteps { get; set; }

    private List<WizardStep> Steps { get; set; } = new List<WizardStep>();
    private int? ActiveStepIndex { get; set; }
    private bool IsActive => ActiveStepIndex.HasValue;
    internal WizardStep ActiveStep => ActiveStepIndex.HasValue && Steps.Count > ActiveStepIndex.Value ? Steps[ActiveStepIndex.Value] : null;

    public async Task Start() {
        if (IsActive) {
            return;
        }

        if (Steps.Any()) {
            ActiveStepIndex = 0;
            await ActiveStep.OnInitializeStep.InvokeAsync(new InitializeStepEventArgs());
            StateHasChanged();
        }
    }

    // TODO cancel?

    internal void AddStep(WizardStep step) {
        Steps.Add(step);
    }

    private async Task TryCompleteStep() {
        var args = new TryCompleteStepEventArgs();

        await ActiveStep.OnTryCompleteStep.InvokeAsync(args);

        if (!args.IsCancelled) {

            ActiveStepIndex++;

            if (ActiveStep != null) {
                await ActiveStep.OnInitializeStep.InvokeAsync(new InitializeStepEventArgs());
            }
            else {
                ActiveStepIndex = null;
            }
        }
    }
}
