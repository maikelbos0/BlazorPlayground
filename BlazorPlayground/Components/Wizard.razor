<CascadingValue Value="this">
    @if (IsActive) {
        var renderedComponents = new HashSet<WizardComponent>();

        <div class="@ContainerClass">

            @foreach (var component in LayoutOrder.Concat(new List<WizardComponent>() { WizardComponent.Title, WizardComponent.Menu, WizardComponent.Buttons, WizardComponent.Content })) {
                switch (component) {
                    case WizardComponent.Title:
                        if (renderedComponents.Contains(WizardComponent.Title)) {
                            continue;
                        }

                        renderedComponents.Add(WizardComponent.Title);

                        <div class="@TitleClass">
                            @TitleContent
                        </div>
                        break;
                    case WizardComponent.Menu:
                        if (renderedComponents.Contains(WizardComponent.Menu)) {
                            continue;
                        }

                        renderedComponents.Add(WizardComponent.Menu);

                        <div class="@MenuClass">
                            @for (var index = 0; index < StepsInternal.Count; index++) {
                                if (index == ActiveStepIndex) {
                                    <div class="@MenuItemClass @ActiveMenuItemClass">@StepsInternal[index].Title</div>
                                }
                                else {
                                    <div class="@MenuItemClass">@StepsInternal[index].Title</div>
                                }
                            }
                        </div>
                        break;

                    case WizardComponent.Buttons:
                        if (renderedComponents.Contains(WizardComponent.Buttons)) {
                            continue;
                        }

                        renderedComponents.Add(WizardComponent.Buttons);

                        <div class="@ButtonBarClass">
                            @if (ShowCancelButton) {
                                <button @onclick="Cancel" class="@ButtonClass">@ButtonCancelText</button>
                            }

                            <button @onclick="TryCompleteStep" class="@ButtonClass">@(ActiveStepIndex < StepsInternal.Count - 1 ? ButtonNextText : ButtonFinishText)</button>
                        </div>
                        break;
                    case WizardComponent.Content:
                        if (renderedComponents.Contains(WizardComponent.Content)) {
                            continue;
                        }

                        renderedComponents.Add(WizardComponent.Content);

                        <div class="@ContentClass">
                            @Steps
                        </div>
                        break;
                }
            }
        </div>
    }
</CascadingValue>
