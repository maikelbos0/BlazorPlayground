@page "/DragToOrder"
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<h1>Drag to order</h1>

<GlobalEventHandler OnMouseMove="Drag" OnMouseUp="StopDrag" />

<ul class="list-group position-relative" @ref="ContainerReference">
    @foreach (var element in Elements) {
        <li class="list-group-item d-flex justify-content-between align-items-center" style="height: @(element.Height)px; @GetStyle(element)">
            <h5>@element.Title</h5>
            <button class="btn btn-primary" @onmousedown="args => StartDrag(element, args)">Move</button>
        </li>
    }
</ul>

@code {
    private IJSObjectReference ModuleReference { get; set; }
    private ElementReference ContainerReference { get; set; }
    private Element SelectedElement { get; set; }
    private List<Element> Elements { get; set; } = Enumerable.Range(1, 8).Select(i => new Element() { Title = $"Item {i}", Height = Random.Shared.Next(40, 100) }).ToList();
    private int? SelectedElementIndex => SelectedElement == null ? null : Elements.IndexOf(SelectedElement);
    private int? NewElementIndex {
        get {
            if (SelectedElement == null || DeltaY == null) {
                return null;
            }

            var index = SelectedElementIndex.Value;
            var deltaY = DeltaY.Value;

            if (deltaY < 0) {
                while (index >= 0 && deltaY < 0) {
                    deltaY += Heights[index];
                    index--;
                }
                index++;
            }
            else {
                while (index < Elements.Count && deltaY > 0) {
                    deltaY -= Heights[index];
                    index++;
                }
                index--;
            }

            return index;
        }
    }
    private double? StartY { get; set; }
    private double? CurrentY { get; set; }
    private double? DeltaY => CurrentY - StartY;
    private List<double> Heights { get; set; } = new();
    private double PageY { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            ModuleReference = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/dragToOrder.js");
        }
    }

    public async ValueTask DisposeAsync() {
        if (ModuleReference is not null) {
            await ModuleReference.DisposeAsync();
        }
    }

    public async Task StartDrag(Element element, MouseEventArgs args) {
        SelectedElement = element;
        StartY = args.PageY;
        PageY = await ModuleReference.InvokeAsync<double>("getPageY", ContainerReference);
        Heights = await ModuleReference.InvokeAsync<List<double>>("getElementHeights", ContainerReference);
    }

    public void Drag(MouseEventArgs args) {
        if (SelectedElement != null) {
            CurrentY = args.PageY;
            Console.WriteLine(NewElementIndex);
        }
    }

    public void StopDrag() {
        SelectedElement = null;
        StartY = null;
        CurrentY = null;
    }

    public string GetStyle(Element element) {
        if (DeltaY == null) {
            return "";
        }

        if (element == SelectedElement) {
            return $"z-index: 1000; margin-top: {DeltaY}px; margin-bottom: {-DeltaY}px";
        }

        var selectedElementIndex = SelectedElementIndex.Value;
        var newElementIndex = NewElementIndex.Value;
        var elementIndex = Elements.IndexOf(element);

        if (selectedElementIndex < newElementIndex && selectedElementIndex < elementIndex && newElementIndex >= elementIndex) {
            return $"margin-top: {-Heights[selectedElementIndex]}px; margin-bottom: {Heights[selectedElementIndex]}px";
        }

        if (selectedElementIndex > newElementIndex && selectedElementIndex > elementIndex && newElementIndex <= elementIndex) {
            return $"margin-top: {Heights[selectedElementIndex]}px; margin-bottom: {-Heights[selectedElementIndex]}px";
        }

        return "";
    }

    public class Element {
        public Guid Id { get; set; } = Guid.NewGuid();
        public int Height { get; set; }
        public required string Title { get; set; }
    }
}
