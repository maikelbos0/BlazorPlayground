@page "/DragToOrder"
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<h1>Drag to order</h1>

<GlobalEventHandler OnMouseMove="Drag" OnMouseUp="StopDrag" />

<ul class="list-group position-relative" @ref="ContainerReference">
    @foreach (var el in Els) {
        <li class="list-group-item d-flex justify-content-between align-items-center" style="@GetStyle(el)">
            <h5>@el.Title</h5>
            <button class="btn btn-primary" @onmousedown="args => StartDrag(el, args)">Move</button>
        </li>
    }
</ul>

@code {
    private IJSObjectReference ModuleReference { get; set; }
    private ElementReference ContainerReference { get; set; }
    private El SelectedEl { get; set; }
    private MouseEventArgs StartEventArgs { get; set; }
    private MouseEventArgs CurrentEventArgs { get; set; }
    private List<El> Els { get; set; } = new() {
        new() { Title = "Item 1" },
        new() { Title = "Item 2" },
        new() { Title = "Item 3" },
    };
    private List<int> Heights { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            ModuleReference = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/dragToOrder.js");
        }
    }

    public async ValueTask DisposeAsync() {
        if (ModuleReference is not null) {
            await ModuleReference.DisposeAsync();
        }
    }

    public async Task StartDrag(El el, MouseEventArgs args) {
        SelectedEl = el;
        StartEventArgs = args;
        Heights = await ModuleReference.InvokeAsync<List<int>>("getElementHeights", ContainerReference);
        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(Heights));
    }

    public void Drag(MouseEventArgs args) {
        if (SelectedEl != null) {
            CurrentEventArgs = args;
        }
    }

    public void StopDrag() {
        SelectedEl = null;
        StartEventArgs = null;
        CurrentEventArgs = null;
    }

    public string GetStyle(El el) {
        if (el == SelectedEl && StartEventArgs != null && CurrentEventArgs != null) {
            var delta = CurrentEventArgs.PageY - StartEventArgs.PageY;
            return $"z-index: 1000; margin-top: {delta}px; margin-bottom: {-delta}px";
        }

        return "";
    }

    public class El {
        public Guid Id { get; set; } = Guid.NewGuid();
        public required string Title { get; set; }
    }
}
