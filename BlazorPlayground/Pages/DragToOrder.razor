@page "/DragToOrder"
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<h1>Drag to order</h1>

<GlobalEventHandler OnMouseMove="Drag" OnMouseUp="StopDrag" />

<ul class="list-group position-relative" @ref="ContainerReference">
    @foreach (var element in Elements) {
        <li class="list-group-item d-flex justify-content-between align-items-center" style="@GetStyle(element)">
            <h5>@element.Title</h5>
            <button class="btn btn-primary" @onmousedown="args => StartDrag(element, args)">Move</button>
        </li>
    }
</ul>

@code {
    private IJSObjectReference ModuleReference { get; set; }
    private ElementReference ContainerReference { get; set; }
    private Element SelectedElement { get; set; }
    private double? StartY { get; set; }
    private double? CurrentY { get; set; }
    private double? DeltaY => CurrentY - StartY;
    private List<Element> Elements { get; set; } = new() {
        new() { Title = "Item 1" },
        new() { Title = "Item 2" },
        new() { Title = "Item 3" },
    };
    private List<double> Heights { get; set; } = new();
    private double PageY { get; set; }
    //private int CurrentElementIndex => ;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            ModuleReference = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/dragToOrder.js");
        }
    }

    public async ValueTask DisposeAsync() {
        if (ModuleReference is not null) {
            await ModuleReference.DisposeAsync();
        }
    }

    public async Task StartDrag(Element element, MouseEventArgs args) {
        SelectedElement = element;
        StartY = args.PageY;
        Heights = await ModuleReference.InvokeAsync<List<double>>("getElementHeights", ContainerReference);
        PageY = await ModuleReference.InvokeAsync<double>("getPageY", ContainerReference);

    }

    public void Drag(MouseEventArgs args) {
        if (SelectedElement != null) {
            CurrentY = args.PageY;
        }
    }

    public void StopDrag() {
        SelectedElement = null;
        StartY = null;
        CurrentY = null;
    }

    public string GetStyle(Element element) {
        if (element == SelectedElement && DeltaY != null) {
            return $"z-index: 1000; margin-top: {DeltaY}px; margin-bottom: {-DeltaY}px";
        }

        return "";
    }

    public class Element {
        public Guid Id { get; set; } = Guid.NewGuid();
        public required string Title { get; set; }
    }
}
