@page "/chart"

<h1>Chart</h1>

<div class="btn-toolbar">
    <fieldset class="btn-group mb-3 me-3">
        <button type="button" class="btn btn-secondary" @onclick="AddDataSeries">Add data series</button>
        <button type="button" class="btn btn-secondary" @onclick="AddDataPoint">Add data point</button>
        <button type="button" class="btn btn-secondary" @onclick="GenerateData">Generate data</button>
    </fieldset>

    <fieldset class="input-group mb-3 me-3">
        <div class="input-group-text">
            <label for="canvasWidth">Canvas width</label>
        </div>

        <input type="text" class="form-control" id="canvasWidth" @bind-value="CanvasWidth" />
    </fieldset>

    <fieldset class="input-group mb-3 me-3">
        <div class="input-group-text">
            <label for="canvasHeight">Canvas height</label>
        </div>

        <input type="text" class="form-control" id="canvasHeight" @bind-value="CanvasHeight" />
    </fieldset>

    <fieldset class="input-group mb-3 me-3">
        <div class="input-group-text">
            <label for="canvasHeight">Canvas height</label>
        </div>

        <input type="text" class="form-control" id="canvasHeight" @bind-value="CanvasHeight" />
    </fieldset>

    <fieldset class="input-group mb-3 me-3">
        <div class="input-group-text">
            <label for="canvasHeight">Canvas height</label>
        </div>

        <input type="text" class="form-control" id="canvasHeight" @bind-value="CanvasHeight" />
    </fieldset>

    <fieldset class="input-group mb-3 me-3">
        <div class="input-group-text">
            <label for="canvasHeight">Chart area</label>
        </div>

        <input type="text" class="form-control" id="canvasHeight" @bind-value="ChartAreaMin" />

        <input type="text" class="form-control" id="canvasHeight" @bind-value="ChartAreaMax" />

        <button type="button" class="btn btn-secondary" @onclick="CalculateChartArea">Calculate</button>
    </fieldset>
</div>

<table>
    <tr>
        <th></th>

        @for (var y0 = 0; y0 < DataSeriesNames.Count; y0++) {
            var y = y0;

            <th>
                <input type="text" class="form-control" @bind-value="DataSeriesNames[y]" />
            </th>
        }
    </tr>

    @for (var x0 = 0; x0 < Labels.Count; x0++) {
        var x = x0;

        <tr>
            <th>
                <input type="text" class="form-control" @bind-value="Labels[x]" />
            </th>

            @for (var y0 = 0; y0 < DataSeries.Count; y0++) {
                var y = y0;

                <td>
                    <input type="text" class="form-control" @bind-value="DataSeries[y][x]" />
                </td>
            }
        </tr>
    }
</table>

@code {
    private const int DefaultChartAreaMin = -100;
    private const int DefaultChartAreaMax = 1000;

    private int CanvasWidth { get; set; } = 1200;
    private int CanvasHeight { get; set; } = 600;
    private decimal ChartAreaMin { get; set; } = DefaultChartAreaMin;
    private decimal ChartAreaMax { get; set; } = DefaultChartAreaMax;

    private List<string> Labels { get; set; } = new List<string>();
    private List<string> DataSeriesNames { get; set; } = new List<string>();
    private List<List<decimal?>> DataSeries { get; set; } = new List<List<decimal?>>();

    protected override void OnInitialized() {
        base.OnInitialized();

        Labels.Add("");
        DataSeriesNames.Add("");
        DataSeries.Add(new List<decimal?>() { null });
    }

    private void AddDataSeries() {
        DataSeriesNames.Add("");
        DataSeries.Add(Enumerable.Range(0, Labels.Count).Select(i => (decimal?)null).ToList());
    }

    private void AddDataPoint() {
        Labels.Add("");
        foreach (var dataSeries in DataSeries) {
            dataSeries.Add(null);
        }
    }

    private void GenerateData() {
        var random = new Random();

        for (var x = 0; x < Labels.Count; x++) {
            if (string.IsNullOrWhiteSpace(Labels[x])) {
                Labels[x] = $"Value {x + 1}";
            }

            for (var y = 0; y < DataSeriesNames.Count; y++) {
                if (DataSeries[y][x] == null) {
                    DataSeries[y][x] = random.Next(-100, 1000);
                }
            }
        }

        for (var y = 0; y < DataSeriesNames.Count; y++) {
            if (string.IsNullOrWhiteSpace(DataSeriesNames[y])) {
                DataSeriesNames[y] = $"Series {y + 1}";
            }
        }
    }

    private void CalculateChartArea() {
        var data = DataSeries.SelectMany(s => s).Where(d => d != null);

        if (data.Any()) {
            var min = (int)data.Min();
            var max = (int)data.Max();
            var delta = Math.Max(Math.Abs(max / 10), max - min);

            ChartAreaMin = min - delta / 10;
            ChartAreaMax = max + delta / 10;
        }
        else {
            ChartAreaMin = DefaultChartAreaMin;
            ChartAreaMax = DefaultChartAreaMax;
        }
    }
}