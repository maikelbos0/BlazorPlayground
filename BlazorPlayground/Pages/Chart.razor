@page "/chart"
@using BlazorPlayground.Chart

<h1>Chart</h1>

<div class="btn-toolbar">
    <fieldset class="btn-group mb-3 me-3">
        <button type="button" class="btn btn-secondary" @onclick="AddDataSeries">Add data series</button>
        <button type="button" class="btn btn-secondary" @onclick="AddDataPoint">Add data point</button>
        <button type="button" class="btn btn-secondary" @onclick="GenerateData">Generate data</button>
    </fieldset>

    <fieldset class="input-group mb-3 me-3">
        <div class="input-group-text">
            <label for="canvasWidth">Canvas width</label>
        </div>

        <input type="text" class="form-control" id="canvasWidth" @bind-value="CanvasWidth" />
    </fieldset>

    <fieldset class="input-group mb-3 me-3">
        <div class="input-group-text">
            <label for="canvasHeight">Canvas height</label>
        </div>

        <input type="text" class="form-control" id="canvasHeight" @bind-value="CanvasHeight" />
    </fieldset>

@*    <fieldset class="input-group mb-3 me-3">
        <div class="input-group-text">Chart range</div>

        <div class="input-group-text">
            <label for="chartAreaMin">Min</label>
        </div>

        <input type="text" class="form-control" id="chartAreaMin" @bind-value="ChartAreaMin" />

        <div class="input-group-text">
            <label for="chartAreaMax">Max</label>
        </div>

        <input type="text" class="form-control" id="chartAreaMax" @bind-value="ChartAreaMax" />

        <div class="input-group-text">
            <label for="chartAreaScale">Scale</label>
        </div>

        <input type="text" class="form-control" id="chartAreaScale" @bind-value="ChartAreaScale" />

        <button type="button" class="btn btn-secondary" @onclick="CalculateChartArea">Calculate</button>
    </fieldset>*@
</div>

<table>
    <tr>
        <th></th>

        @for (var y0 = 0; y0 < XYChart.DataSeries.Count; y0++) {
            var y = y0;

            <th>
                <input type="text" class="form-control" @bind-value="XYChart.DataSeries[y].Name" />
            </th>
        }
    </tr>

    @for (var x0 = 0; x0 < XYChart.Labels.Count; x0++) {
        var x = x0;

        <tr>
            <th>
                <input type="text" class="form-control" @bind-value="XYChart.Labels[x]" />
            </th>

            @for (var y0 = 0; y0 < XYChart.DataSeries.Count; y0++) {
                var y = y0;

                <td>
                    <input type="text" class="form-control" @bind-value="XYChart.DataSeries[y][x]" />
                </td>
            }
        </tr>
    }
</table>

@code {
    private XYChart XYChart = new();

    private int CanvasWidth { get; set; } = 1200;
    private int CanvasHeight { get; set; } = 600;

    protected override void OnInitialized() {
        base.OnInitialized();

        XYChart.Labels.Add("");
        XYChart.DataSeries.Add(new DataSeries("") { null });
    }

    private void AddDataSeries() {
        var dataSeries = new DataSeries("");
        dataSeries.AddRange(XYChart.Labels.Select(l => (double?)null));
        XYChart.DataSeries.Add(dataSeries);
    }

    private void AddDataPoint() {
        XYChart.Labels.Add("");

        foreach (var dataSeries in XYChart.DataSeries) {
            dataSeries.Add(null);
        }
    }

    private void GenerateData() {
        var random = new Random();

        for (var x = 0; x < XYChart.Labels.Count; x++) {
            XYChart.Labels[x] = $"Value {x + 1}";
        }

        for (var y = 0; y < XYChart.DataSeries.Count; y++) {
            if (string.IsNullOrWhiteSpace(XYChart.DataSeries[y].Name)) {
                XYChart.DataSeries[y].Name = $"Series {y + 1}";
            }

            for (var x = 0; x < XYChart.DataSeries[y].Count; x++) {
                if (XYChart.DataSeries[y][x] == null) {
                    XYChart.DataSeries[y][x] = random.Next(-100, 900);
                }
            }
        }
    }
}