@page "/chart"
@using BlazorPlayground.Chart

<h1>Chart</h1>

<div class="btn-toolbar">
    <fieldset class="btn-group mb-3 me-3">
        <button type="button" class="btn btn-secondary" @onclick="AddBarDataSeries">Add bar data series</button>
        <button type="button" class="btn btn-secondary" @onclick="AddLineDataSeries">Add line data series</button>
        <button type="button" class="btn btn-secondary" @onclick="AddDataPoint">Add data point</button>
        <button type="button" class="btn btn-secondary" @onclick="GenerateData">Generate data</button>
    </fieldset>

    <fieldset class="input-group mb-3 me-3">
        <div class="input-group-text">Canvas dimensions</div>

        <div class="input-group-text">
            <label for="width">Width</label>
        </div>

        <input type="text" class="form-control" id="width" @bind-value="xyChart.Canvas.Width" />

        <div class="input-group-text">
            <label for="height">Height</label>
        </div>

        <input type="text" class="form-control" id="height" @bind-value="xyChart.Canvas.Height" />

        <div class="input-group-text">
            <label for="padding">Padding</label>
        </div>

        <input type="text" class="form-control" id="padding" @bind-value="xyChart.Canvas.Padding" />

        <div class="input-group-text">
            <label for="yAxisLabelWidth">Y-axis label width</label>
        </div>

        <input type="text" class="form-control" id="yAxisLabelWidth" @bind-value="xyChart.Canvas.YAxisLabelWidth" />

        <div class="input-group-text">
            <label for="yAxisLabelClearance">Y-axis label clearance</label>
        </div>

        <input type="text" class="form-control" id="yAxisLabelClearance" @bind-value="xyChart.Canvas.YAxisLabelClearance" />

        <div class="input-group-text">
            <label for="yAxisLabelFormat">Y-axis label format</label>
        </div>

        <input type="text" class="form-control" id="yAxisLabelFormat" @bind-value="xyChart.Canvas.YAxisLabelFormat" />

        <div class="input-group-text">
            <label for="yAxisMultiplierFormat">Y-axis multiplier format</label>
        </div>

        <input type="text" class="form-control" id="yAxisMultiplierFormat" @bind-value="xyChart.Canvas.YAxisMultiplierFormat" />

        <div class="input-group-text">
            <label for="xAxisLabelHeight">X-axis label height</label>
        </div>

        <input type="text" class="form-control" id="xAxisLabelHeight" @bind-value="xyChart.Canvas.XAxisLabelHeight" />

        <div class="input-group-text">
            <label for="xAxisLabelClearance">X-axis label clearance</label>
        </div>

        <input type="text" class="form-control" id="xAxisLabelClearance" @bind-value="xyChart.Canvas.XAxisLabelClearance" />
    </fieldset>

    <fieldset class="input-group mb-3 me-3">
        <div class="input-group-text">Plot area</div>

        <div class="input-group-text">
            <label for="plotAreaMin">Min</label>
        </div>

        <input type="text" class="form-control" id="plotAreaMin" @bind-value="xyChart.PlotArea.Min" />

        <div class="input-group-text">
            <label for="plotAreaMax">Max</label>
        </div>

        <input type="text" class="form-control" id="plotAreaMax" @bind-value="xyChart.PlotArea.Max" />

        <div class="input-group-text">
            <label for="plotAreaGridLineInterval">Grid line interval</label>
        </div>

        <input type="text" class="form-control" id="plotAreaGridLineInterval" @bind-value="xyChart.PlotArea.GridLineInterval" />

        <div class="input-group-text">
            <label for="plotAreaMultiplier">Multiplier</label>
        </div>

        <input type="text" class="form-control" id="plotAreaMultiplier" @bind-value="xyChart.PlotArea.Multiplier" />
    </fieldset>

    <fieldset class="input-group mb-3 me-3">
        <div class="input-group-text">Auto scale plot area</div>

        <div class="input-group-text">
            <input class="form-check-input mt-0" type="checkbox" id="autoScaleIsEnabled" @bind="xyChart.PlotArea.AutoScaleSettings.IsEnabled" />
            <label class="form-check-label ps-2" for="autoScaleIsEnabled">Enabled</label>
        </div>

        <div class="input-group-text">
            <label for="autoScaleRequestedGridLineCount">Requested grid line count</label>
        </div>

        <input type="text" class="form-control" id="autoScaleRequestedGridLineCount" @bind-value="xyChart.PlotArea.AutoScaleSettings.RequestedGridLineCount" />

        <div class="input-group-text">
            <input class="form-check-input mt-0" type="checkbox" id="autoScaleIncludeZero" @bind="xyChart.PlotArea.AutoScaleSettings.IncludeZero" />
            <label class="form-check-label ps-2" for="autoScaleIncludeZero">Always include zero</label>
        </div>

        <div class="input-group-text">
            <label for="autoScaleClearancePercentage">Clearance percentage</label>
        </div>

        <input type="text" class="form-control" id="autoScaleClearancePercentage" @bind-value="xyChart.PlotArea.AutoScaleSettings.ClearancePercentage" />
    </fieldset>

    <fieldset class="input-group mb-3 me-3">
        <div class="input-group-text">Bar layer</div>

        <div class="input-group-text">
            <input class="form-check-input mt-0" type="checkbox" id="barLayerIsStacked" @bind="barLayer.IsStacked" />
            <label class="form-check-label ps-2" for="barLayerIsStacked">Stack bars</label>
        </div>

        <div class="input-group-text">
            <label for="barLayerClearancePercentage">Clearance percentage</label>
        </div>

        <input type="text" class="form-control" id="barLayerClearancePercentage" @bind-value="barLayer.ClearancePercentage" />

        <div class="input-group-text">
            <label for="barLayerGapPercentage">Gap percentage</label>
        </div>

        <input type="text" class="form-control" id="barLayerGapPercentage" @bind-value="barLayer.GapPercentage" />
    </fieldset>

    <fieldset class="input-group mb-3 me-3">
        <div class="input-group-text">Line layer</div>

        <div class="input-group-text">
            <input class="form-check-input mt-0" type="checkbox" id="lineLayerIsStacked" @bind="lineLayer.IsStacked" />
            <label class="form-check-label ps-2" for="lineLayerIsStacked">Stack lines</label>
        </div>

        <div class="input-group-text">
            <input class="form-check-input mt-0" type="checkbox" id="lineLayerShowDataMarkers" @bind="lineLayer.ShowDataMarkers" />
            <label class="form-check-label ps-2" for="lineLayerShowDataMarkers">Show data markers</label>
        </div>

        <div class="input-group-text">
            <label for="lineLayerDataMarkerSize">Size</label>
        </div>

        <input type="text" class="form-control" id="lineLayerDataMarkerSize" @bind-value="lineLayer.DataMarkerSize" />

        <div class="input-group-text">
            <label for="lineLayerDataMarkerType">Type</label>
        </div>

        <select class="form-select" id="lineLayerDataMarkerType" @onchange="SetDataMarkerType">
            <option value="Round">Round</option>
            <option value="Square">Square</option>
        </select>

        <div class="input-group-text">
            <input class="form-check-input mt-0" type="checkbox" id="lineLayerShowDataLines" @bind="lineLayer.ShowDataLines" />
            <label class="form-check-label ps-2" for="lineLayerShowDataLines">Show data lines</label>
        </div>
    </fieldset>
</div>

<table class="mb-3">
    <tr>
        <th></th>

        @for (var x0 = 0; x0 < xyChart.Labels.Count; x0++) {
            var x = x0;

            <th>
                <input type="text" class="form-control" @bind-value="xyChart.Labels[x]" />
            </th>
        }
    </tr>

    @for (var y0 = 0; y0 < barLayer.DataSeries.Count; y0++) {
        var y = y0;

        <tr>
            <th>
                <input type="text" class="form-control" @bind-value="barLayer.DataSeries[y].Name" />
            </th>

            @for (var x0 = 0; x0 < xyChart.Labels.Count; x0++) {
                var x = x0;
                <td>
                    <input type="text" class="form-control" @bind-value="barLayer.DataSeries[y][x]" />
                </td>
            }
        </tr>
    }

    @for (var y0 = 0; y0 < lineLayer.DataSeries.Count; y0++) {
        var y = y0;

        <tr>
            <th>
                <input type="text" class="form-control" @bind-value="lineLayer.DataSeries[y].Name" />
            </th>

            @for (var x0 = 0; x0 < xyChart.Labels.Count; x0++) {
                var x = x0;
                <td>
                    <input type="text" class="form-control" @bind-value="lineLayer.DataSeries[y][x]" />
                </td>
            }
        </tr>
    }
</table>

<ChartRenderer Chart="xyChart" />

@code {
    // TODO make the whole thing declarative?
    private XYChart xyChart = new();

    // TODO set up interface to allow multiple layers
    private BarLayer barLayer;
    private LineLayer lineLayer;

    public Chart() {
        barLayer = xyChart.AddBarLayer();
        lineLayer = xyChart.AddLineLayer();
    }

    protected override void OnInitialized() {
        base.OnInitialized();

        AddDataPoint();
        AddBarDataSeries();
        AddLineDataSeries();
    }

    private void AddBarDataSeries() {
        barLayer.AddDataSeries($"Bar series {barLayer.DataSeries.Count + 1}");
    }

    private void AddLineDataSeries() {
        lineLayer.AddDataSeries($"Line series {lineLayer.DataSeries.Count + 1}");
    }

    private void AddDataPoint() {
        xyChart.AddDataPoint($"Value {xyChart.Labels.Count + 1}");
    }

    private void SetDataMarkerType(ChangeEventArgs args) {
        lineLayer.DataMarkerType = args.Value switch {
            "Round" => DefaultDataMarkerTypes.Round,
            "Square" => DefaultDataMarkerTypes.Square,
            _ => throw new NotImplementedException()
        };
    }

    private void GenerateData() {
        var random = new Random();

        foreach (var dataSeries in xyChart.Layers.SelectMany(layer => layer.DataSeries)) {
            for (var x = 0; x < dataSeries.Count; x++) {
                if (dataSeries[x] == null) {
                    dataSeries[x] = random.Next(-100, 900);
                }
            }
        }

        // TODO fix state - plotarea values get recalculated during render, so we need to update rendered values for those after rendering the chart without going infinite
    }
}