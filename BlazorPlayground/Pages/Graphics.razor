@page "/graphics"
@using BlazorPlayground.Graphics

<h1>Graphics</h1>

<ul class="nav nav-tabs mb-3">
    @foreach (var type in Enum.GetValues<ActionType>()) {
        <li class="nav-item">
            <a class="nav-link @(currentActionType == type ? "active" : "")" @onclick="() => currentActionType = type">@actionDefinitions[type].Name</a>
        </li>
    }
</ul>

<div class="container-fluid mb-3">
    <div class="row">
        @if (currentActionType == ActionType.Select) {

        }
        else if (currentActionType == ActionType.DrawLine) {

        }
        else if (currentActionType == ActionType.DrawRegularPolygon) {
            <div class="mb-3 col-6 col-md-3 col-xl-2">
                <label for="regularPolygonSides" class="form-label">Sides (minimum 3)</label>
                <input type="text" class="form-control" id="regularPolygonSides" @bind-value="RegularPolygonSides" />
            </div>
        }
    </div>
</div>

<div class="container-fluid graphics-main">
    <svg @onmousedown="OnMouseDown" @onmousemove="OnMouseMove" @onmouseup="OnMouseUp" @onclick="OnClick">
        @foreach (var shape in shapes) {
            <ShapeRenderer @key="shape" Shape="shape" OnClick="args => OnShapeClick(args, shape)" />
        }

        @if (IsDrawing && CurrentActionDefinition is DrawActionDefinition drawActionDefinition) {
            var newShape = drawActionDefinition.CreateShape(this, currentPoint);
            newShape.RenderMode = ShapeRenderMode.New;

            <ShapeRenderer @key="startPoint" Shape="newShape" />
        }
    </svg>
</div>

@code {
    private enum ActionType {
        Select,
        DrawLine,
        DrawRegularPolygon
    }

    public class ActionDefinition {
        public string Name { get; }
        public Action<Graphics, Point> Execute { get; }

        public ActionDefinition(string name, Action<Graphics, Point> Execute) {
            Name = name;
            this.Execute = Execute;
        }
    }

    public class DrawActionDefinition : ActionDefinition {
        public Func<Graphics, Point, Shape> CreateShape { get; }

        public DrawActionDefinition(string name, Func<Graphics, Point, Shape> createShape) : base(name, (graphics, endPoint) => graphics.shapes.Add(createShape(graphics, endPoint))) {
            CreateShape = createShape;
        }
    }

    private static Dictionary<ActionType, ActionDefinition> actionDefinitions = new Dictionary<ActionType, ActionDefinition>() {
        { ActionType.Select, new ActionDefinition("Select", (_, _) => { }) },
        { ActionType.DrawLine, new DrawActionDefinition("Line", (graphics, endPoint) => new Line(graphics.startPoint, endPoint)) },
        { ActionType.DrawRegularPolygon, new DrawActionDefinition("Regular polygon", (graphics, endPoint) => new RegularPolygon(graphics.startPoint, endPoint, graphics.regularPolygonSides)) }
    };

    private List<Shape> shapes = new List<Shape>();
    private ActionType currentActionType = ActionType.DrawRegularPolygon;
    private Point startPoint;
    private Point currentPoint;
    private int regularPolygonSides = 4;
    private bool hasSelected = false;

    public int RegularPolygonSides {
        get => regularPolygonSides;
        set => regularPolygonSides = Math.Max(value, 3);
    }

    public bool IsDrawing => startPoint != null;

    public ActionDefinition CurrentActionDefinition => actionDefinitions[currentActionType];

    public void OnMouseDown(MouseEventArgs args) {
        if (args.Button == 0) {
            startPoint = new Point(args.OffsetX, args.OffsetY);
            currentPoint = new Point(args.OffsetX, args.OffsetY);
        }
    }

    public void OnMouseMove(MouseEventArgs args) {
        if (IsDrawing) {
            currentPoint = new Point(args.OffsetX, args.OffsetY);
        }
    }

    public void OnMouseUp(MouseEventArgs args) {
        if (IsDrawing) {
            CurrentActionDefinition.Execute(this, new Point(args.OffsetX, args.OffsetY));
            startPoint = null;
            currentPoint = null;
        }
    }

    public void OnClick(MouseEventArgs args) {
        if (currentActionType == ActionType.Select) {
            if (hasSelected) {
                hasSelected = false;
            }
            else {
                DeselectAll();
            }
        }
    }

    public void OnShapeClick(MouseEventArgs args, Shape shape) {
        if (currentActionType == ActionType.Select) {
            hasSelected = true;

            if (args.CtrlKey) {
                if (shape.RenderMode == ShapeRenderMode.Default) {
                    shape.RenderMode = ShapeRenderMode.Selected;
                }
                else {
                    shape.RenderMode = ShapeRenderMode.Default;
                }
            }
            else {
                DeselectAll();
                shape.RenderMode = ShapeRenderMode.Selected;
            }
        }
    }

    public void DeselectAll() {
        foreach (var shape in shapes.Where(s => s.RenderMode == ShapeRenderMode.Selected)) {
            shape.RenderMode = ShapeRenderMode.Default;
        }
    }
}
