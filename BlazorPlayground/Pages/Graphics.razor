@page "/graphics"

<h1>Graphics</h1>

<EditForm Model="drawType">
    <InputRadioGroup @bind-Value="@drawType">
        <div>
            <InputRadio Value="DrawType.Line" /> Line
            <InputRadio Value="DrawType.Square" /> Square
        </div>
    </InputRadioGroup>
</EditForm>

<svg width="500" height="500" style="border: 1px solid grey" @onmousedown="OnStart" @onmouseup="OnEnd">
    @foreach (var line in Lines) {
        // TODO fix double formatting to be invariant here
        <line @key="@line" x1="@line.StartPoint.X" y1="@line.StartPoint.Y" x2="@line.EndPoint.X" y2="@line.EndPoint.Y" style="stroke: #000; stroke-width: 2;" />
    }

    @foreach (var square in Squares) {
        <polyline @key="@square" points="@string.Join(" ", square.GetPoints().Select(p => FormattableString.Invariant($"{p.X},{p.Y}")))" style="stroke: #000; stroke-width: 2; fill: transparent;" />
    }
</svg>

@code {
    public enum DrawType {
        Line,
        Square
    }

    private DrawType drawType = DrawType.Line;
    private Point? startPoint;

    public void OnStart(MouseEventArgs args) {
        startPoint = new Point(args.OffsetX, args.OffsetY);
    }

    public void OnEnd(MouseEventArgs args) {
        if (startPoint != null) {
            var endPoint = new Point(args.OffsetX, args.OffsetY);

            switch (drawType) {
                case DrawType.Line:
                    Lines.Add(new Line(startPoint, endPoint));
                    break;
                case DrawType.Square:
                    Squares.Add(new Square(startPoint, endPoint));
                    break;
            }

            startPoint = null;
        }
    }

    public List<Line> Lines { get; set; } = new List<Line>() {
        new Line(new Point(10, 10), new Point(250, 490)),
        new Line(new Point(490, 10), new Point(250, 250)),
    };

    public List<Square> Squares { get; set; } = new List<Square>() {
        new Square(new Point(140, 140), new Point(240, 240)),
        new Square(new Point(180, 180), new Point(280, 280))
    };

    public class Point {
        public double X { get; }
        public double Y { get; }

        public Point(double x, double y) {
            X = x;
            Y = y;
        }

        public static Point operator +(Point p1, Point p2) => new Point(p1.X + p2.X, p1.Y + p2.Y);
    }

    public class Square {
        public Point CenterPoint { get; }
        public Point RadiusPoint { get; }

        public Square(Point centerPoint, Point radiusPoint) {
            CenterPoint = centerPoint;
            RadiusPoint = radiusPoint;
        }

        public IEnumerable<Point> GetPoints() {
            // TODO fix bug when drawing it creates not quite a square
            var points = 4;
            var radius = Math.Sqrt(Math.Pow(RadiusPoint.X - CenterPoint.X, 2) + Math.Pow(RadiusPoint.Y - CenterPoint.Y, 2));
            var startingAngle = Math.Asin((RadiusPoint.X - CenterPoint.X) / radius);
            var pointAngle = Math.PI / points * 2;

            yield return RadiusPoint;

            for (var i = 1; i <= points; i++) {
                var angle = startingAngle + pointAngle * i;

                yield return CenterPoint + new Point(radius * Math.Cos(angle), radius * Math.Sin(angle));
            }
            
            yield return RadiusPoint;
        }
    }

    public class Line {
        public Point StartPoint { get; }
        public Point EndPoint { get; }

        public Line(Point startPoint, Point endPoint) {
            StartPoint = startPoint;
            EndPoint = endPoint;
        }
    }
}
