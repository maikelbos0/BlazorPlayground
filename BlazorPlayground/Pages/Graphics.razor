@page "/graphics"
@using BlazorPlayground.Graphics

<h1>Graphics</h1>

<ul class="nav nav-tabs">
    @foreach (var type in Enum.GetValues<ShapeType>()) {
        <li class="nav-item">
            <a class="nav-link @(shapeType == type ? "active" : "")" @onclick="() => shapeType = type">@shapeData[type].Name</a>
        </li>
    }
</ul>

<div class="card">
    <div class="card-body container-fluid">
        <h5 class="card-title">Settings</h5>

        <div class="row">
            @if (shapeType == ShapeType.Line) {

            }
            else if (shapeType == ShapeType.RegularPolygon) {
                <div class="mb-3 col-6 col-md-3 col-xl-2">
                    <label for="regularPolygonSides" class="form-label">Sides (minimum 3)</label>
                    <input type="text" class="form-control" id="regularPolygonSides" @bind-value="RegularPolygonSides" />
                </div>
            }

        </div>
    </div>
</div>

<div class="card">
    <div class="card-body container-fluid">
        <svg class="graphics-main" @onmousedown="OnMouseDown" @onmousemove="OnMouseMove" @onmouseup="OnMouseUp">
            @foreach (var shape in shapes) {
                <ShapeRenderer @key="shape" Shape="shape" />
            }

            @if (startPoint != null && currentPoint != null) {
                <ShapeRenderer @key="startPoint" Shape="ShapeFactory(this, currentPoint)" RenderMode="ShapeRenderMode.New" />
            }
        </svg>
    </div>
</div>

@code {
    private static Dictionary<ShapeType, (string Name, Func<Graphics, Point, IShape> Factory)> shapeData = new Dictionary<ShapeType, (string Name, Func<Graphics, Point, IShape> Factory)>() {
        { ShapeType.Line, ("Line", (graphics, endPoint) => new Line(graphics.startPoint, endPoint)) },
        { ShapeType.RegularPolygon, ("Polygon", (graphics, endPoint) => new RegularPolygon(graphics.startPoint, endPoint, graphics.regularPolygonSides)) }
    };

    private List<IShape> shapes = new List<IShape>();
    private ShapeType shapeType = ShapeType.RegularPolygon;
    private Point startPoint;
    private Point currentPoint;
    private int regularPolygonSides = 4;

    public int RegularPolygonSides {
        get => regularPolygonSides;
        set => regularPolygonSides = Math.Max(value, 3);
    }

    public bool IsDrawing => startPoint != null;

    public Func<Graphics, Point, IShape> ShapeFactory => shapeData[shapeType].Factory;

    public void OnMouseDown(MouseEventArgs args) {
        startPoint = new Point(args.OffsetX, args.OffsetY);
    }

    public void OnMouseMove(MouseEventArgs args) {
        if (startPoint != null) {
            currentPoint = new Point(args.OffsetX, args.OffsetY);
        }
    }

    public void OnMouseUp(MouseEventArgs args) {
        if (startPoint != null) {
            shapes.Add(ShapeFactory(this, new Point(args.OffsetX, args.OffsetY)));
            startPoint = null;
            currentPoint = null;
        }
    }
}
