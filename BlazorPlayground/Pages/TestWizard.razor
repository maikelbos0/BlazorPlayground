@page "/wizard"
@page "/wizard/{autostart:bool}"

<div class="container">
    <h1>BlazorPlayground Test</h1>

    <div>
        <button @onclick="() => Wizard.Stop()" class="btn btn-primary">Be gone, wizard!</button>
        <button @onclick="() => Wizard.Start()" class="btn btn-primary">Show yourself, wizard!</button>
    </div>

    <Wizard @ref="Wizard"
            ContainerClass="wizard"
            TitleContainerClass="wizard-title"
            StepTitleContainerClass="wizard-menu"
            StepTitleClass="wizard-menu-item"
            ActiveStepTitleClass="wizard-menu-item-active"
            ButtonContainerClass="wizard-buttons"
            ButtonClass="wizard-button"
            ContentContainerClass="wizard-body"
            AllowCancel="true">
        <TitleContent>
            Test wizard
        </TitleContent>
        <Steps>
            <WizardStep Title="EditForm" OnInitialize="InitStep1" OnTryComplete="TryCompleteStep1">
                <EditForm EditContext="Context">
                    <DataAnnotationsValidator />

                    <label for="Value">Value</label>
                    <InputText @bind-Value="TestModel.Value" id="Value" />
                    <ValidationMessage For="() => TestModel.Value" />
                </EditForm>
            </WizardStep>
            <WizardStep Title="Step 2" OnInitialize="InitStep2" OnTryComplete="TryCompleteStep2">
                <div>
                    <input type="checkbox" @bind="Step2Check" /> Go next?
                </div>
                A content 2
            </WizardStep>
            <WizardStep Title="Component">
                <Step3/>
            </WizardStep>
            <WizardStep Title="Step 4">
                A last content
            </WizardStep>
        </Steps>
    </Wizard>

    <div>@Status</div>
</div>

@code {
    [Parameter]
    public bool AutoStart { get; set; }

    public EditContext Context { get; set; }
    public Model TestModel { get; set; }
    public Wizard Wizard { get; set; }

    public string Status { get; set; } = string.Empty;

    public bool Step2Check { get; set; } = true;

    public void TryCompleteStep1(WizardStepAttemptedCompleteEventArgs args) {
        args.IsCancelled = !Context.Validate();
    }

    public void TryCompleteStep2(WizardStepAttemptedCompleteEventArgs args) {
        args.IsCancelled = !Step2Check;
    }

    public void InitStep1() {
        Context = new EditContext(TestModel = new Model());
        Status += "Step 1 init! ";
    }

    public void InitStep2(WizardStepInitializedEventArgs args) {
        Status += "Step 2 init! ";
    }

    protected override void OnAfterRender(bool firstRender) {
        if (firstRender && AutoStart) {
            Wizard.Start();
            StateHasChanged();
        }
    }
}
